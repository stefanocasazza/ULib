<!--#
prototype for Victor Stewart
-->
<!--#declaration
#ifdef USE_LIBSSL
static UWebSocketClient* wsclient;
static vPF message_for_another_usp;

static void usp_init_modsocket()
{
   U_TRACE_NO_PARAM(5, "::usp_init_modsocket()")

   U_NEW(UWebSocketClient, wsclient, UWebSocketClient());
}

#ifdef DEBUG
static void usp_end_modsocket()
{
   U_TRACE_NO_PARAM(5, "::usp_end_modsocket()")

   U_DELETE(wsclient)
}
#endif

static void usp_open_modsocket()
{
   U_TRACE_NO_PARAM(0, "::usp_open_modsocket()")

   U_DEBUG("usp_open_modsocket(): called");
}

static void usp_close_modsocket()
{
   U_TRACE_NO_PARAM(0, "::usp_close_modsocket()")

   U_DEBUG("usp_close_modsocket(): called");
}

static bool isMessageForAnotherUSP(const UString& msg)
{
   U_TRACE(5, "::isMessageForAnotherUSP(%V)", msg.rep)

   U_RETURN(false);
}

static bool isMessageForAnotherWebSocket(const UString& msg)
{
   U_TRACE(5, "::isMessageForAnotherWebSocket(%V)", msg.rep)

   U_RETURN(true);
}
#endif
-->
<!--#code
#ifdef USE_LIBSSL
U_DEBUG("modsocket(): message %V", UWebSocket::message->rep);

if (isMessageForAnotherUSP(*UWebSocket::message))
   {
   if (message_for_another_usp == U_NULLPTR)
      {
      (void) UHTTP::getUSP(U_CONSTANT_TO_PARAM("another_usp"));

      U_INTERNAL_ASSERT_POINTER(UHTTP::usp->runDynamicPage)

      message_for_another_usp = UHTTP::usp->runDynamicPage;
      }

   message_for_another_usp();

   // ...
   }
else if (isMessageForAnotherWebSocket(*UWebSocket::message))
   {
   if (wsclient->connectServer(U_STRING_FROM_CONSTANT("ws://localhost:8888/websocket"))) (void) wsclient->sendMessage(*UWebSocket::message, U_WS_MESSAGE_TYPE_BROTLI);

   // ...
   }
else
   {
   // echo

   if (UWebSocket::sendData(false, UServer_Base::csocket, UWebSocket::message_type, *UWebSocket::message) == false) U_http_info.nResponseCode = HTTP_INTERNAL_ERROR;
   }
#endif
-->
